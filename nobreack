#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Nobreack supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "Application Nobreack"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  nobreack COMMAND [options] [arguments]"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}nobreack php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}nobreack php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}nobreack composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}nobreack composer require monolog/monolog${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}nobreack node ...${NC}         Run a Node command"
    echo "  ${GREEN}nobreack node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}nobreack npm ...${NC}        Run a npm command"
    echo "  ${GREEN}nobreack npx${NC}            Run a npx command"
    echo "  ${GREEN}nobreack npm run prod${NC}"
    echo
    echo "${YELLOW}Yarn Commands:${NC}"
    echo "  ${GREEN}nobreack yarn ...${NC}        Run a Yarn command"
    echo "  ${GREEN}nobreack yarn run prod${NC}"
    echo
    echo "${YELLOW}Build Image:${NC}"
    echo "  ${GREEN}nobreack build <version> or <version>/<path_dockerfile>${NC}        Run a Docker build command"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Applications's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_SERVICE=${APP_SERVICE:-"nobreack"}
export APP_IMAGE=${APP_IMAGE:-"php-cli:8.1-1.0.0"}
export APP_PORT=${APP_PORT:-80}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}
export APP_WORK_DIR=${APP_WORK_DIR:-$(pwd)}

# Function that outputs Nobreack is not running...
function nobreack_is_not_running {
    echo "${BOLD}Nobreack is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may Nobreack using the following commands:${NC}" >&2

    exit 1
}

EXEC="yes"

# Define Docker Compose command prefix...
docker --version &> /dev/null
if [ $? == 0 ]; then
    DOCKER=(docker container)
else
    EXEC="no"
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(sudo -u nobreack)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" "php" "$@")
    else
        nobreack_is_not_running
    fi

    # Proxy Composer commands to the "composer" binary on the application container...
    elif [ "$1" == "composer" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" "composer" "$@")
        else
            nobreack_is_not_running
        fi

    # Proxy Node commands to the "node" binary on the application container...
    elif [ "$1" == "node" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" node "$@")
        else
            nobreack_is_not_running
        fi

    # Proxy NPM commands to the "npm" binary on the application container...
    elif [ "$1" == "npm" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" npm "$@")
        else
            nobreack_is_not_running
        fi

    # Proxy NPX commands to the "npx" binary on the application container...
    elif [ "$1" == "npx" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" npx "$@")
        else
            nobreack_is_not_running
        fi

    # Proxy YARN commands to the "yarn" binary on the application container...
    elif [ "$1" == "yarn" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("${DOCKER[@]} run -it --rm -v $APP_WORK_DIR:/var/www -e WWWUSER=$WWWUSER $APP_IMAGE" yarn "$@")
        else
            nobreack_is_not_running
        fi
    # Docker build image command...
    elif [ "$1" == "build" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            ARGS+=(sudo -u nobreack)
            [ ! -t 0 ] && ARGS+=(-T)
            ARGS+=("docker build --build-arg WWWGROUP=$(id -g) -t php-cli:8.1-1.0.0 ./$@")
        else
            nobreack_is_not_running
        fi
else
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
${ARGS[@]}